package com.pingwit.part_33.reentrant_lock;

public class ReentrantLockTheory {
    public static void main(String[] args) {
        /*
        ReentrantLock - это класс в, который предоставляет альтернативный механизм синхронизации потоков,
        отличный от ключевого слова synchronized. Он позволяет управлять блокировками в более гибком и точном способе.

        Вот основные характеристики и функции класса ReentrantLock:

        1. Блокировка с возможностью повторного входа (Reentrancy):
           ReentrantLock поддерживает механизм блокировки с возможностью повторного входа, что означает, что поток,
           уже захвативший блокировку, может снова захватить ее без блокировки.
           Это полезно в ситуациях, когда методы могут вызываться рекурсивно.

        2. Монопольное владение (Monopolistic Ownership):
           Только поток, который захватил блокировку, может освободить ее.
           Это обеспечивает безопасность от случайного освобождения блокировки другими потоками.

        3. Поддержка прерывания (Interruptible Locking):
           Методы lockInterruptibly() и tryLock() позволяют выполнить прерываемую попытку захвата блокировки.
           Это позволяет потоку не зацикливаться в ожидании блокировки.

        4. Справедливость (Fairness):
           ReentrantLock может работать в режиме справедливости (fairness), что гарантирует,
           что блокировки будут предоставляться потокам в порядке очереди. Это может помочь предотвратить голодание потоков.

        5. Условия (Conditions):
           ReentrantLock может создавать объекты Condition, которые позволяют потокам ждать определенного условия.
           Это может быть полезно в сценариях, когда потоки должны ожидать определенного сигнала для продолжения работы.
         */

        /*
        Чем отличается метод lock()без аргументов от tryLock(long timeout, TimeUnit unit):
        1. tryLock():
           Этот метод пытается немедленно захватить блокировку.
           Если блокировка доступна в момент вызова, метод захватывает ее и возвращает true.
           Если блокировка в данный момент занята другим потоком, метод возвращает false и не блокирует текущий поток ожиданием.
           Метод tryLock() без аргументов пытается захватить блокировку без какого-либо ожидания.

           Этот метод не обрабатывает прерывания.
           Если поток ожидает блокировку в результате вызова tryLock() и получает сигнал прерывания,
           он не будет прерван и метод просто вернет false.

        2. tryLock(long time, TimeUnit unit):
           Этот метод пытается захватить блокировку, ожидая указанное количество времени.
           Параметры time и unit определяют максимальное время ожидания блокировки.
           Если блокировка доступна в момент вызова, метод захватывает ее и возвращает true.
           Если блокировка в данный момент занята другим потоком, метод ожидает указанное время, пытаясь захватить блокировку.
           Если блокировка становится доступной в течение времени ожидания, метод ее захватывает и возвращает true.
           Если время ожидания истекает до того, как блокировка становится доступной, метод возвращает false.
           Этот метод полезен в ситуациях, когда необходимо попытаться захватить блокировку с ожиданием, но не желательно блокировать поток бесконечно.
         */
    }
}
